{% extends "base.jinja2" %}
{% import "categories/macros.jinja2" as catecro with context %}
{% import "ajax_macros.jinja2" as ajax_macro %}
{% import "basic_macros.jinja2" as b_macro with context %}

{% block content %}

    <div class="treeview-container">
        <div id="treeview" class="treeview">
        </div>
    </div>

    {# 削除モーダル #}
    {{ b_macro.confirm_modal(modal_id='delete_confirm', btn_class="btn-danger") }}

    {# 名称変更モーダル #}
    <div class="modal fade" tabindex="-1" role="dialog" id="update-name-modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                            aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">名称変更</h4>
                </div>
                <div class="alert alert-danger" role="alert">
                </div>


                <div class="modal-body">
                    <div class="form-group">
                        <label>カテゴリ名</label>
                        <input type="text" name="category-name" class="form-control">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-success" onclick="updateName();">更新</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->

{% endblock %}

{% block body_script %}
    <script src="https://code.jquery.com/ui/1.12.0/jquery-ui.min.js"></script>
    <link href="https://code.jquery.com/ui/1.12.0/themes/smoothness/jquery-ui.css " rel="stylesheet">

    <script src="{{ static('js/bootstrap-treeview.js') }}"></script>
    <script src="{{ static("categories/treeview.js") }}"></script>

    <script>
        {{ ajax_macro.django_ajax_init() }}

        var editNode;
        var treeHelper;

        // deleteConfirm 設定
        var deleteConfirm = $('#delete_confirm');
        deleteConfirm.find('.modal-message').html('このカテゴリ配下の記事は、すべて「カテゴリなし」の状態になります。(記事自体は削除されません)<br />カテゴリを削除しますか？');
        deleteConfirm.find('.modal-submit').click(deleteCategory);

        // updateConfirm
        var updateNameModal = $('#update-name-modal');
        updateNameModal.on('shown.bs.modal', function () {
            updateNameModal.find('input').focus();
        });

        $(function () {
            treeHelper = new TreeViewHelper($('#treeview'), {{ catecro.make_category_tree(None, False) }});
            treeHelper.handler.onMovingNode = function (target_node, new_parent_node) {
                var target_path = treeHelper.getPath(target_node);
                var new_parent_path = treeHelper.getPath(new_parent_node);
                return movePath(target_path, new_parent_path);
            };
            treeHelper.handler.onClickedDeleteNode = function (node) {
                editNode = node;
                //モーダル表示
                deleteConfirm.modal('show');
            };
            treeHelper.handler.onClickedUpdateName = function (node) {
                editNode = node;
                updateNameModal.find('input').val(node.name);
                updateNameModal.find('.alert').hide();
                updateNameModal.modal('show');
            }
        });

        /**
         * カテゴリの移動
         * @param targetPath 移動するカテゴリパス
         * @param newParentPath 移動先カテゴリパス
         * @returns {boolean} 移動成功可否
         */
        function movePath(targetPath, newParentPath) {
            var res = false;
            $.ajax({
                type: 'POST',
                url: '{{ url('categories:move_category') }}',
                data: {'target_path': targetPath, 'new_parent_path': newParentPath},
                dataType: 'json',
                timeout: 10000,
                async: false // TODO:とりあえず非同期にしている。非同期で、サーバーレスポンスを得られるまで待機するようなしくみにできれば尚良。(他のjsonメソッドも同様)
            }).done(function (data) {
                console.log(data);
                if (data['state'] === true) {
                    res = true;
                } else {
                    alert(data['message']);
                }
            }).fail(function () {
                console.log(arguments);
                showErrorAndReload();
            });
            return res;
        }

        /**
         * カテゴリの削除
         */
        function deleteCategory() {
            var targetPath = treeHelper.getPath(editNode);

            $.ajax({
                type: 'POST',
                url: '{{ url('categories:delete_category') }}',
                data: {'target_path': targetPath},
                dataType: 'json',
                timeout: 10000,
                async: false
            }).done(function (data) {
                console.log(data);
                if (data['state'] === true) {
                    treeHelper.deleteNode(editNode);
                } else {
                    alert(data['message']);
                }
            }).fail(function () {
                console.log(arguments);
                showErrorAndReload();
            });
            deleteConfirm.modal('hide');
        }

        /**
         * カテゴリ名更新
         */
        function updateName() {
            var newName = updateNameModal.find('input').val();
            var targetPath = treeHelper.getPath(editNode);
            $.ajax({
                type: 'POST',
                url: '{{ url('categories:update_name') }}',
                data: {'target_path': targetPath, 'name': newName},
                dataType: 'json',
                timeout: 10000,
                async: false
            }).done(function (data) {
                console.log(data);
                if (data['state'] === true) {
                    treeHelper.updateNodeName(editNode, newName);
                    updateNameModal.modal('hide');
                } else {
                    updateNameModal.find('.alert').show().text(data['message']);

                }
            }).fail(function () {
                console.log(arguments);
                showErrorAndReload();
            });
        }

        function showErrorAndReload() {
            alert('エラーが発生したため、リロードします');
            location.reload();
        }
    </script>
{% endblock %}
